import os
import shutil

import time
from multiprocessing import Lock
from multiprocessing.pool import ThreadPool
import threading

from benchmark import LFR_Benchmark
from experiment_synthetic import exp_synthetic
from experiment_empirical import exp_empirical
from miscellaneous_funcs import create_folder_if_needed


def gather_info():
    """
    Ask for user's inputs to be used as parameters for experiments.
    """

    datatype = input("Generate synthetic network or use empirical network (synthetic or empirical)? ").lower().strip()
    
    if datatype == 'synthetic':
        # if synthetic network, require inputs for number of nodes, community detection algorithm, average degree (optional) and min community size (optional)
        num_node = int(input("Number of nodes: "))
        method = input("Community detection algorithm (louvain,leiden,infomap,label): ").lower().strip()
        k = int(input("Average degree of the nodes (default value 25): ") or "25")
        minc = int(input("Minimum community size (default value 50): ") or "50")
        edge_append_method = input("How to randomly select edges to append? (uniform,inter,intra): ").lower().strip()
        add_up_to = float(input("Add up to how many times of original number of edges (default value 10): ") or "10")
        return (num_node, method, k, minc, edge_append_method, add_up_to, datatype)
    elif datatype == 'empirical':
        # if empirical network, require inputs for path to network data and community detection algorithm
        path = os.path.dirname(os.getcwd()) + "/" + input("Path to network data (in " + os.path.dirname(os.getcwd()) + "/): ").strip()
        method = input("Community detection algorithm (louvain,leiden,infomap,lpm): ").lower().strip()
        return (path, method, datatype)
    else:
        raise ValueError('Invalid Input: Please use synthetic or empirical.')



def run_synthetic(arguments):
    """
    Run experiment on synthetic network.

    :param arguments: a list of parameters
        arguments[0]: N - number of nodes
        arguments[1]: mu - mixing parameter
        arguments[2]: k - average degree
        arguments[3]: maxk - max degree
        arguments[4]: minc - min community size
        arguments[5]: maxc - max community size
        arguments[6]: method - community detection method
        arguments[7]: ground_truth_network_file - path to the benchmark network file generated by LFR
        arguments[8]: ground_truth_community_file - path to file storing the ground truth community assignment of the LFR network
        arguments[9]: out_directory_path - result output path
        arguments[10]: edge_append_flag - flag indicating how we append edges randomly
        arguments[11]: add_up_to - how many of original number of edges added up to

    :return: None
    """
    
    N = arguments[0]
    mu = arguments[1]
    k = arguments[2] 
    maxk = arguments[3]
    minc = arguments[4] 
    maxc = arguments[5] 
    method = arguments[6]
    ground_truth_network_file = arguments[7] 
    ground_truth_community_file = arguments[8] 
    out_directory_path = arguments[9]
    edge_append_flag = arguments[10]
    add_up_to = arguments[11]

    experiment = exp_synthetic(N, mu, k, maxk, minc, maxc, method, ground_truth_network_file, ground_truth_community_file, out_directory_path, edge_append_flag, add_up_to)
    experiment()



def run_empirical(network_name, network_file_path, out_directory_path, method):
    """
    Run experiment on empirical network.

    :param network_name: name of the network, parsed from the provided data filename
    :param network_file_path: path to the network data
    :param out_directory_path: result output path
    :param method: community detection method
    
    :return: None
    """

    experiment = exp_empirical(network_name, network_file_path, out_directory_path, method)
    experiment()



def main():
    
    inputs = gather_info()

    # If not existed, create folder to store experimental data
    if not os.path.exists(os.path.dirname(os.getcwd()) + "/Data"):
        create_folder_if_needed(os.path.dirname(os.getcwd()) + "/Data")
    
    # Synthetic Case
    if len(inputs) == 7:
        N = inputs[0]
        method = inputs[1]
        k = inputs[2]
        minc = inputs[3]
        edge_append_method = inputs[4]
        add_up_to = inputs[5]
        datatype = inputs[6]
        
    # Empirical Case
    elif len(inputs) == 3:
        path = inputs[0]
        method = inputs[1]
        datatype = inputs[2]


    # Experiment for synthetic networks
    if datatype == 'synthetic':
        # Assign parameters, max degree and max community, to be passed into LFR algorithm based on number of nodes input
        if N > 500:
            maxk = round(N/10)   # maximum degree
            maxc = round(N/10)      # maximum community size
        else:
            maxk = round(N/5)
            maxc = round(N/3)

        program_path = os.path.dirname(os.getcwd()) + "/LFR_Benchmark/"    # LFR executable path
        out_directory_path = os.path.dirname(os.getcwd()) + "/Data/LFR_network/" # Output path; create if not existed
        if not os.path.exists(os.path.dirname(os.getcwd()) + "/Data"):
            create_folder_if_needed(os.path.dirname(os.getcwd()) + "/Data")
        if not os.path.exists(out_directory_path[:-1]):
            create_folder_if_needed(out_directory_path[:-1])

        # Check if path existed to store perturbed data; if not, create new
        if not os.path.exists(out_directory_path + "perturbed_data"):
            create_folder_if_needed(out_directory_path + "perturbed_data")
    
        edge_append_method_dict = {"uniform": 0, "inter": 1, "intra": 2}
        edge_append_flag = edge_append_method_dict[edge_append_method]

        mu_arrays = [0.01, 0.1, 0.2, 0.3, 0.4, 0.5] # mixing parameter

        start_time = time.time()

        for mu in mu_arrays:
            # Check if LFR_Benchmark exists, if not, run LFR_Benchmark
            if os.path.exists(out_directory_path + "network_N_" + str(N) + "_mu_" + str(mu) + "_k_" + str(k) + "_maxk_" + str(maxk) + "_minc_" + str(minc) + "_maxc_" + str(maxc) + ".dat"):
                print('LFR_benchmark data already exists. Running synthetic experiment mu =',mu)
            else:
                print('LFR_benchmark data not existed. Running LFR...')
                lfr = LFR_Benchmark(program_path, N, k, maxk, mu, minc, maxc, out_directory_path)
                lfr()

            # paths to the ground truth network and community assignment files to be passed into experiment
            ground_truth_network_file = out_directory_path + "network_N_" + str(N) + "_mu_" + str(mu) + "_k_" + str(k) + "_maxk_" + str(maxk) + "_minc_" + str(minc) + "_maxc_" + str(maxc) + ".dat"
            
            ground_truth_community_file = out_directory_path + "community_N_" + str(N) + "_mu_" + str(mu) + "_k_" + str(k) + "_maxk_" + str(maxk) + "_minc_" + str(minc) + "_maxc_" + str(maxc) + ".dat"

            run_synthetic([N, mu, k, maxk, minc, maxc, method, ground_truth_network_file, ground_truth_community_file, out_directory_path, edge_append_flag, add_up_to])

        print("Total time: ", time.time() - start_time)



    # Experiment for empirical networks
    if datatype == 'empirical':
        # path to store data
        out_directory_path = os.path.dirname(os.getcwd()) + "/Data/empirical_network/"

        file_name = path.split("/")[-1]

        # create out_directory_path if not existed
        if not os.path.exists(os.path.dirname(os.getcwd()) + "/Data"):
            create_folder_if_needed(os.path.dirname(os.getcwd()) + "/Data")
        if not os.path.exists(out_directory_path[:-1]):
            create_folder_if_needed(out_directory_path[:-1])

        # new path to copy the empirical dataset to
        network_file_path = out_directory_path + file_name
        
        # Check if the data file exists in the provided path
        if not os.path.exists(path):
            raise ValueError('Did not find the network data file')

        # Move file to specified folder if not done so before
        if not os.path.exists(network_file_path):
            shutil.copy(path, network_file_path)

        network_name = file_name.split(".")[0]

        run_empirical(network_name, network_file_path, out_directory_path, method)



if __name__ == "__main__":
    main()
